(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{400:function(t,s,a){"use strict";a.r(s);var n=a(38),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"js-看不懂的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-看不懂的","aria-hidden":"true"}},[t._v("#")]),t._v(" JS 看不懂的 []+{}")]),t._v(" "),a("h2",{attrs:{id:"面试滑铁卢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面试滑铁卢","aria-hidden":"true"}},[t._v("#")]),t._v(" 面试滑铁卢")]),t._v(" "),a("p",[t._v("有一天，去面试，遇到这样的题：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("???WTF，谁会没事这么写代码，好吧，我错了，大佬别打我。懵逼之后要干嘛？当然是要学习一波，于是我满世界找资料，有好东西当然是要分享一波，好了，接下来我们就一起走进 JavaScript 隐式转换的世界吧。")]),t._v(" "),a("h2",{attrs:{id:"加法运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加法运算","aria-hidden":"true"}},[t._v("#")]),t._v(" 加法运算")]),t._v(" "),a("p",[t._v("在 JavaScript 中加法运算规则很简单，它只做数字和字符串的加法操作，所有不是这两种类型的都会被转换成这两种原始数据类型再进行操作。")]),t._v(" "),a("p",[t._v("在 JavaScript 中，数据类型分两种：")]),t._v(" "),a("ul",[a("li",[t._v("原始数据类型(primitives): undefined, null, boolean, number,string,symbol")]),t._v(" "),a("li",[t._v("其他的都是对象，包括数组、函数。")])]),t._v(" "),a("p",[t._v("那么对象是如何转换成原始数据类型的呢？不要慌，我们继续看。")]),t._v(" "),a("h2",{attrs:{id:"toprimitive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#toprimitive","aria-hidden":"true"}},[t._v("#")]),t._v(" ToPrimitive")]),t._v(" "),a("p",[t._v("JS 有一个内部运算 "),a("code",[t._v("ToPrimitive()")]),t._v("，它用于对象转换为原始数据类型。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToPrimitive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" PreferredType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("这个函数接收两个参数：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("input:")]),t._v(" 这个参数是输入的值。")]),t._v(" "),a("li",[a("strong",[t._v("PreferredType:")]),t._v(" 这个参数可以是数字或者是字符串的一种(Number or String)，这代表了我们的对象会转换成哪种原始数据类型。如果缺少这个参数的话，那对于 Date 的实例，默认为 String，其余的都为 Number。")])]),t._v(" "),a("p",[t._v("下面我们来看一下对于不同的参数，它的转换过程是什么样的？")]),t._v(" "),a("h3",{attrs:{id:"preferredtype-为-number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#preferredtype-为-number","aria-hidden":"true"}},[t._v("#")]),t._v(" PreferredType 为 Number")]),t._v(" "),a("ol",[a("li",[t._v("如果 input 为原始类型，则直接返回 input。")]),t._v(" "),a("li",[t._v("否则，如果 input 是一个对象，则会去调用对象的 "),a("code",[t._v("valueOf()")]),t._v(" 方法，如果结果为原始类型就直接返回。")]),t._v(" "),a("li",[t._v("如果上一步返回的依然是对象，那么就回去调用对象的 "),a("code",[t._v("toString()")]),t._v(" 方法，如果结果为原始数据类型就返回。")]),t._v(" "),a("li",[t._v("如果还不是原始数据类型就抛出错误，一般是 "),a("strong",[t._v("Uncaught TypeError: Cannot convert object to primitive value")]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"preferredtype-为-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#preferredtype-为-string","aria-hidden":"true"}},[t._v("#")]),t._v(" PreferredType 为 String")]),t._v(" "),a("p",[t._v("参数 String 就不细说了，当参数为 String 的时候，上面的第二步和第三步交换就行了，也就是先调用 "),a("code",[t._v("toString()")]),t._v(" 再调用 "),a("code",[t._v("valueOf()")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算","aria-hidden":"true"}},[t._v("#")]),t._v(" + 运算")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("value1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" value2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("上面的操作方式如下：")]),t._v(" "),a("ol",[a("li",[t._v("将两个操作数转换成基本数据类型：")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// PreferredType被省略，因此非日期为 Number，日期为 String。")]),t._v("\nprim1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToPrimitive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nprim2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToPrimitive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("如果 prim1 或 prim2 是一个字符串，则将其转换为字符串并返回结果的连接。")]),t._v(" "),a("li",[t._v("否则，将 prim1 和 prim2 都转换为数字并返回结果的总和。")])]),t._v(" "),a("h2",{attrs:{id:"valueof-和-tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#valueof-和-tostring","aria-hidden":"true"}},[t._v("#")]),t._v(" valueOf 和 toString")]),t._v(" "),a("p",[t._v("这两个都是 Object 的属性，可以自己定义，现在我们不管，我们去看看下面几种情况这两个方法返回的都是什么。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数组")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("a3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("p",[t._v("将上面的代码放到控制台打印一下就知道：")]),t._v(" "),a("ul",[a("li",[t._v("对象： valueOf() 返回对象本身，toString() 返回值为 [object Object]。")]),t._v(" "),a("li",[t._v("数组： valueOf() 返回对象本身，数组改写了 toString()，返回值相当于用 "),a("code",[t._v("join(',')")]),t._v(" 的返回值，比如 "),a("code",[t._v("[1,2,3].toString()")]),t._v(' 返回 "1,2,3"。')]),t._v(" "),a("li",[t._v("方法： valueOf() 返回方法本身，Function 也改写了对象的 toString()，它将代码转为字符串值然后返回。")])]),t._v(" "),a("h2",{attrs:{id:"举个栗子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#举个栗子","aria-hidden":"true"}},[t._v("#")]),t._v(" 举个栗子")]),t._v(" "),a("p",[t._v("好了，根据我们上面说的，那些面试题简直洒洒水，我们来看。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("我们如何去分析呢？在这里，我们首先将 [] 和 {} 转换成原始数据类型，也就是 ToPrimitive([]) 以及 ToPrimitive({})，PreferredType 默认为 Number，很明显 "),a("code",[t._v("[].valueOf()")]),t._v(" 还是一个对象，所以我们继续，"),a("code",[t._v("[].toString()")]),t._v(' 结果为 ""，相同的解析过程 {} 转换成 "[object Object]"。')]),t._v(" "),a("p",[t._v('好了，现在这个式子是 "" + "[object Object]"，我们知道 + 运算只要有字符串就拼接操作数，所以结果是 "[object Object]"。')]),t._v(" "),a("p",[t._v("但是，在我进行测试的时候，发现了几个特殊的例子，"),a("code",[t._v("{}+1")]),t._v("、"),a("code",[t._v("{}+[]")]),t._v(" 这两个例子在控制台打印出的结果为 "),a("code",[t._v("1")]),t._v(" 和 "),a("code",[t._v('""')]),t._v("，很奇怪是吧？我搜了搜资料发现，不同浏览器对其的解析不同，它会将前面一个 {} 当成代码块，于是上面的式子就变成了 "),a("code",[t._v("+1")]),t._v(" 和 "),a("code",[t._v("+[]")]),t._v("，所以得出了上面的结果。")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("好了，经过上面的探究，我相信大家不会再被这些问题难住了，但是要记住，{} 在前面的情况下可能会因为浏览器的差异会造成不同的结果，当然，如果你这样将 {} 用 () 包起来就不会有问题了，或者是先声明在使用。")]),t._v(" "),a("h2",{attrs:{id:"更多资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更多资源","aria-hidden":"true"}},[t._v("#")]),t._v(" 更多资源")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://2ality.com/2012/01/object-plus-object.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("What is {} + {} in JavaScript?"),a("OutboundLink")],1),t._v(" —— 作者有着德国阮一峰的称号")])]),t._v(" "),a("blockquote",[a("p",[t._v("更多文章尽在 "),a("a",{attrs:{href:"https://github.com/balancelove/readingNotes/",target:"_blank",rel:"noopener noreferrer"}},[t._v("我的博客仓库"),a("OutboundLink")],1),t._v("，如果各位读者觉得有用，欢迎 star，不胜感激。")])])])},[],!1,null,null,null);s.default=e.exports}}]);