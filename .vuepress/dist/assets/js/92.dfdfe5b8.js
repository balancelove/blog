(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{324:function(t,a,s){"use strict";s.r(a);var e=s(38),n=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"immutable-和-react-的那些事儿"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#immutable-和-react-的那些事儿","aria-hidden":"true"}},[t._v("#")]),t._v(" immutable 和 React 的那些事儿")]),t._v(" "),s("blockquote",[s("p",[t._v("immutable 的中文意思叫做不可改变的，那不可改变的数据结构有什么优势呢？它与 React 会擦出什么样的火花呢？它底层又是如何实现的呢？我们接下来一起来看。")])]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#为什么要-immutable"}},[t._v("为什么要 immutable")])]),s("li",[s("a",{attrs:{href:"#immutable-和-react"}},[t._v("immutable 和 react")])]),s("li",[s("a",{attrs:{href:"#immutable-如何实现"}},[t._v("immutable 如何实现")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"为什么要-immutable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要-immutable","aria-hidden":"true"}},[t._v("#")]),t._v(" 为什么要 immutable")]),t._v(" "),s("p",[t._v("我们在书写代码的时候可能会做出这样的操作：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sortMyArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("我们虽然能够得到正确的结果，但是非常遗憾的是这个数组被我们改变了，他经过我们的函数被污染了，再使用到其他地方就可能得到意想不到的结果。")]),t._v(" "),s("p",[t._v("所以在平常的开发过程中，我们要有 immutable 的意识。")]),t._v(" "),s("p",[t._v("那么为什么我们说 immutable 适合 react 呢？我们接着看。")]),t._v(" "),s("h2",{attrs:{id:"immutable-和-react"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#immutable-和-react","aria-hidden":"true"}},[t._v("#")]),t._v(" immutable 和 react")]),t._v(" "),s("p",[t._v("众所周知，React 更新方式是由 "),s("code",[t._v("state")]),t._v(" 和 "),s("code",[t._v("props")]),t._v(" 的更新引起的，当某个组件发生更新的时候，React 会根据最新的状态构建一颗新的 "),s("code",[t._v("virtual DOM")]),t._v(" 树，然后使用 diff 算法进行对比，如果不同则会进行渲染。")]),t._v(" "),s("p",[t._v("React 中 "),s("code",[t._v("shouldComponentUpdate")]),t._v(" 默认返回 "),s("code",[t._v("true")]),t._v("，所以当更改某一个叶子节点的状态时，整个树形都会重新渲染，即使是那些状态没有更新的节点，这在某种程度上耗费了性能。")]),t._v(" "),s("p",[t._v("基于这些问题 React 又提出了 "),s("code",[t._v("PureComponent")]),t._v("，它实现了对数据进行了浅比较，虽然这解决了一部分问题，但是还是没有根本性的解决这个问题。")]),t._v(" "),s("p",[t._v("比如说，数据是这样变动的:")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pre'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// =====> 只改变了 name 属性")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'after'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("这样的数据改变并没有引起组件的更新，这显然是不对的，这是因为这两个对象的引用是相同的，同时数组长度也相同。")]),t._v(" "),s("p",[t._v("那么，我们要如何解决这个问题呢？")]),t._v(" "),s("ol",[s("li",[t._v("深拷贝：改变了引用地址，自然就会更新了，但是太消耗内存。")]),t._v(" "),s("li",[t._v("JSON.stringify: 这也是深拷贝的一种黑魔法了，有局限性，会断掉原型链，同时有些东西并不能使用这种方式拷贝，比如函数。")])]),t._v(" "),s("p",[t._v("接下来我们要说的就是 immutable.js 了，虽然实现 immutable 的库比较多，但这里就挑一个来说。")]),t._v(" "),s("p",[t._v("它的特点就是 "),s("code",[t._v("持久化数据结构")]),t._v(" 和 "),s("code",[t._v("结构共享")]),t._v("，保证每一个对象都是不可变的，任何添加、删除、修改等操作都会返回一个新的对象，并且通过结构共享提高性能。")]),t._v(" "),s("p",[t._v("比如说，我们在一个对象中新增加一个节点，那么就把这个对象到根节点的路径上的节点全部重新生成，而其余的结构不变，这样整个对象的引用改变了，但是却只修改一部分数据，大大提高了性能。")]),t._v(" "),s("h2",{attrs:{id:"immutable-如何实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#immutable-如何实现","aria-hidden":"true"}},[t._v("#")]),t._v(" immutable 如何实现")]),t._v(" "),s("p",[t._v("immutable.js 参考了 "),s("code",[t._v("Vector Trie")]),t._v(" 这种数据结构，使用了位分区的方式，同时加上哈希表来实现的。")]),t._v(" "),s("p",[t._v("具体的分析可以看"),s("a",{attrs:{href:"https://segmentfault.com/a/1190000016404944",target:"_blank",rel:"noopener noreferrer"}},[t._v("这篇文章"),s("OutboundLink")],1),t._v("，我这儿就不多解释了。")])])},[],!1,null,null,null);a.default=n.exports}}]);